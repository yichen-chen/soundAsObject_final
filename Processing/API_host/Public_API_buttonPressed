/*  Template for working with REST APIs */

// URL of public API_HOST
//String api_host_in = "https://michaellamoon-2021.serverless.social";
String api_host_in = "https://ychen-dvvin6kh82.loca.lt";

// request frequency
// this value should not be less than the INTERVAL in arduino-serial-fetch 
// If it was, we would be requesting data faster than it is updated.
Timer interval = new Timer(200);

// array to store all pin data
int[] pins_local; 
int[] pins_in; 

int localButtonState;
int lastLocalButtonState;
int inButtonState;
int lastInButtonState;

void setup() {
  size(500, 500);
  // start the interval timer
  interval.start();
}

void draw() {
  // check if the interval has elapsed
  if (interval.isFinished()) {
    // request the data asynchronously in a thread.
    thread("retrieveData_local");
    thread("retrieveData_in");
    interval.start();
  }
  
  // check first to make sure pins array is populated with data
  // anything using pin data will need to happen within this conditional
  if (pins_local != null && pins_local.length > 0) {

    float local0 = map(pins_local[0], 0, 1023, 0, 255); //A0 knob
    float local1 = map(pins_local[1], 0, 1023, 0, 255); //A1 sensor
    int localButton = pins_local[8];//D2 button
    
    //insert local preview code here
    
    localButtonState = (localButton);
    if (localButtonState != lastLocalButtonState){
      if(localButtonState == 1){
        //For when local-button pressed
       println("------------------Local!");
      }
    lastLocalButtonState = localButtonState;
    }
  }
    if (pins_in != null && pins_in.length > 0) {

    float in0 = map(pins_in[0], 0, 1023, 0, 255); //A0 knob
    float in1 = map(pins_in[1], 0, 1023, 0, 255); //A1 sensor
    int inButton = pins_in[8]; //D2 button
    
    inButtonState = (inButton);
    if (inButtonState != lastInButtonState){
      if(inButtonState == 1){
        //for when in-button pressed here
        println("--------------------In!!");
      }
    lastInButtonState = inButtonState;
    }
  }
}

// get the data
void retrieveData_local() {
  JSONArray allPins = loadJSONArray("http://localhost:3000/pins");

  // init the pins array to be the same size as allPins
  pins_local = new int[allPins.size()];
  
  // step through allPins reassign to the pins array for global use
  for (int i = 0; i < allPins.size(); i++) {
    JSONObject pin = allPins.getJSONObject(i); 
    pins_local[i] = pin.getInt("value");
    // see which array index corresponds to which pin. comment this out when not needed.
     println("[local "+i+"]" + "\t" + pin.getString("id") + "\t" + pin.getInt("value"));
  }

}


void retrieveData_in() {
  JSONArray allPins = loadJSONArray(api_host_in + "/pins");

  // init the pins array to be the same size as allPins
  pins_in = new int[allPins.size()];
  
  // step through allPins reassign to the pins array for global use
  for (int i = 0; i < allPins.size(); i++) {
    JSONObject pin = allPins.getJSONObject(i); 
    pins_in[i] = pin.getInt("value");
    // see which array index corresponds to which pin. comment this out when not needed.
     println("[in "+i+"]" + "\t" + pin.getString("id") + "\t" + pin.getInt("value"));
  }

}
